import argparse


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-f', help='font file', required=True)
    return parser.parse_args()


def to_hex(src):
    symbols = list(src)
    result = 0b0
    for symbol in symbols:
        result <<= 1
        if symbol == '*':
            result |= 0b1
    return hex(result)


def parse(data):
    size = data.count('char');
    result = [[] for i in range(256)]

    index = 0
    end = len(data)
    while(index < end):
        if data[index] != 'char':
            index += 1
            continue
        index += 1
        code = int(data[index], 16)
        index += 1
        for line in range(16):
            result[code].append(to_hex(data[index + line]))

        index += 16
    return result


def read(path = ''):
    if (path == ''):
        return src
    with open(path, 'r') as f:
        return f.read()


def write(path, data = ''):
    with open(path, 'w') as f:
        f.write(data)


def build(data):
    template = """#ifndef MYOS_FONT_H
#define MYOS_FONT_H

/**
 * auto-generated by scripts/font.py
 */
char FONT[256][16] = {{
  {}
}};

#endif
"""
    size = len(data)
    fonts = ['{{{}}}'.format(', '.join(data[i])) for i in range(size)]
    return template.format(',\n  '.join(fonts))


def main():
    args = get_args()
    data = read(args.f).split()
    parsed = parse(data)
    header = build(parsed)
    write('./include/window/font.h', header)


if __name__ == '__main__':
    main()

